/**
 * Build Configuration Module
 * @module BuildConfig
 * @description
 * Core build system configuration and utilities for Plain License project.
 * Handles esbuild setup, image processing, and asset management.
 *
 * Features:
 * - Dynamic esbuild configuration with plugins
 * - Automated hero image srcset generation
 * - Smart focal point mapping for responsive images
 * - Cross-platform asset processing
 * - Glob-based file resolution
 *
 * @see {@link https://esbuild.github.io/}
 * @see {@link https://github.com/sindresorhus/globby}
 *
 * @license Plain-Unlicense
 * @author Adam Poulemanos adam<at>plainlicense<dot>org
 * @copyright No rights reserved.
 */

import { cssModulesPlugin } from "@asn.aeb/esbuild-css-modules-plugin"
// @ts-ignore
import { tsconfigPathsPlugin } from "esbuild-plugin-tsconfig-paths"
import * as esbuild from "esbuild"
import { copy } from 'esbuild-plugin-copy'
import globby from "globby"
import * as fs from "fs"

import type { HeroImage, HeroImageBase, HeroVideo, Project, VideoConfig, WidthMap } from "../types.ts"

export const videoConfig: VideoConfig = {
  resolutions: [
    { width: 3840, height: 2160 },
    { width: 2560, height: 1440 },
    { width: 1920, height: 1080 },
    { width: 1280, height: 720 },
    { width: 854, height: 480 },
    { width: 640, height: 360 }
  ],
  codecs: ['av1', 'vp9'],
  baseDir: 'src/assets/videos/hero'
}

/**
 * @returns {Promise<string[]>} Directory paths containing hero videos
 */
export async function getVideoParents(): Promise<string[]> {
  return globby("src/assets/videos/hero/*", { onlyDirectories: true, unique: true })
}

/**
 * @param {string} baseName The base name of the video
 * @param {string} codec The codec of the video
 * @param {number} width The width of the video
 * @returns {string} Constructed video file path
 */
export function buildVideoPath(baseName: string, codec: string, width: number): string {
  return `src/assets/videos/hero/${baseName}/${baseName}_${codec}_${width}.webm`
}

/**
 * @param {string} baseName The base name of the video
 * @returns {Promise<HeroVideo>} A promise that resolves to the hero video object
 */
export async function generateVideoVariants(baseName: string): Promise<HeroVideo> {
  const variants: { av1: Record<number, string>, vp9: Record<number, string> } = {
    av1: {},
    vp9: {}
  }

  for (const resolution of videoConfig.resolutions) {
    for (const codec of videoConfig.codecs) {
      const path = buildVideoPath(baseName, codec, resolution.width)
      if (await fs.promises.access(path).catch(() => false)) {
        variants[codec][resolution.width] = path
      }
    }
  }

  // Get matching poster image
  const images = await heroImages()
  const posterImage = images[baseName]

  return {
    baseName,
    parent: `src/assets/videos/hero/${baseName}`,
    variants,
    poster: posterImage,
  }
}

/**
 * @returns {Promise<string[]>} that resolves to the first file that matches the glob.
 * @description Scans the hero image directory for parent directories.
 */
async function getHeroParents(): Promise<string[]> {
  const fastGlobSettings = { onlyDirectories: true, unique: true }
  const parents = globby("src/assets/images/hero/*", fastGlobSettings)
  for await (const parent of await parents) {
    (await parents).push(parent.replace("images", "videos"))
  }
  return parents
}

/**
 * @param {string} glob The glob to resolve.
 * @returns An array of files that match the glob.
 * @description Resolves a glob to a single file.
 */
export const heroParents: Promise<string[]> = getHeroParents()

const jsBanner = `/**
 * ---DO NOT EDIT THIS FILE---
 * it is generated by the build process
 * instead edit the source file
 *
 * main site sources are in src/assets/javascripts directory
 */
`
const cssBanner = `/**
  * ---DO NOT EDIT THIS FILE---
  * it is generated by the build process
  * instead edit the source file
  *
  * sources are in src/assets/stylesheets directory
  *
  */
`
/**
 * @description esbuild configuration for the web platform.
 */
export const webConfig: esbuild.BuildOptions = {
  bundle: true,
  minify: false,
  sourcemap: true,
  metafile: true,
  banner: { js: jsBanner, css: cssBanner },
  format: "esm",
  platform: "browser",
  target: "es2020",
  outbase: "src",
  chunkNames: "[dir]/assets/javascripts/chunks/[name].[hash]",
  assetNames: "[dir]/[name].[hash]",

  loader: {
    ".js": "js",
    ".ts": "ts",
    ".tsx": "tsx",
    ".css": "css",
    ".scss": "css",
    ".sass": "css",
    ".woff": "file",
    ".woff2": "file",
    ".png": "file",
    ".svg": "file",
    ".webp": "file",
    ".webm": "file",
    ".avif": "file",
  },
  outExtension: {".js": ".js", ".css": ".css"},
  splitting: false,
  plugins: [
    tsconfigPathsPlugin({
      cwd: process.cwd(),
      tsconfig: "tsconfig.json",
      filter: /src\/assets\/javascripts\/index.ts/
    }),
    cssModulesPlugin({
      emitCssBundle: {
        filename: "bundle.css",
      },
    }),
    copy({
      watch: true,
      verbose: true,
      resolveFrom: "cwd",
      globbyOptions: { gitignore: true, extglob: true, unique: true },
      assets: [
        { from: "./src/assets/images/*.+(svg|png|webp)", to: "./docs/assets/images" },
        { from: "./src/assets/fonts/*.+(woff|woff2)", to: "./docs/assets/fonts" },
        { from: "./src/assets/videos/*.+(webm|avif)", to: "./docs/assets/videos" },
      ],
    }),
  ],
}

export const baseProject: Project = {
  entryPoints: ["src/assets/javascripts/index.ts",
    "src/assets/javascripts/workers/cache_worker.ts",
    "src/assets/stylesheets/bundle.css"
  ],
  tsconfig: "tsconfig.json",
  entryNames: "[dir]/[name].[hash]",
  platform: "browser",
  outdir: "docs",
}

/**
 * @param {string} glob The glob to resolve.
 * @param {globby.GlobbyOptions} fastGlobOptions Options to pass to fast-glob.
 * @returns {Promise<string[]>} A promise that resolves to the first file that matches the glob.
 */
async function resolveGlob(glob: string, fastGlobOptions?: {}): Promise<string[]> {
  try {
    const result = await globby(glob, fastGlobOptions)
    if (result.length === 0) {
      throw new Error(`Glob "${glob}" did not match any files`)
    } else {
      return result
    }
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("Error resolving glob:", error)
    throw error
  }
}

/**
 * @param {HeroImageBase} image The image to generate the Srcset for.
 * @returns {Promise<string>} A promise that resolves to the Srcset for the image.
 * @description Generates a Srcset property for the provided image.
 */
export async function generateSrcset(image: HeroImageBase): Promise<string> {
  const entries = await Promise.all(
    Object.entries(image.widths).map(async ([width, src]) => {
      return `${await resolveGlob(src, { onlyFiles: true, unique: true })} ${width}w`
    })
  )
  return entries.join(", ")
}

/**
 * @returns {Promise<Record<string, HeroImage>>} A promise that resolves to a map of hero images.
 * @description Generates a map of hero images with their respective widths and Srcsets.
 */
export const heroImages = async (): Promise<Record<string, HeroImage>> => {
  const parents = await resolveGlob("src/assets/images/hero/*", { onlyDirectories: true })
  const retrieveKey = (filePath: string) => filePath.split("/").pop()
  const getWidthMaps = async () => {
    const results = await Promise.allSettled(
      parents.map(async (parent: string) => {
        const key = retrieveKey(parent)
        const heroFilePattern = `${key}_{1280,1920,2560,3840}.avif`
        const children = await globby(`${parent}/${heroFilePattern}`, { onlyFiles: true, unique: true })
        const flattenedWidths: WidthMap = children.reduce<WidthMap>((acc: WidthMap, child: string) => {
          const width: number | undefined = [1280, 1920, 2560, 3840].find((w: number) => child.includes(w.toString()))
          if (width) {
            acc[width] = child
          }
          return acc
        }, {} as WidthMap) // Initialize acc as an empty WidthMap
        const srcset = await generateSrcset({ parent, widths: flattenedWidths })
        return [key, { parent, widths: flattenedWidths, srcset }] as [string, HeroImage]
      })
    )

    return Object.fromEntries(
      results
        .filter((result): result is PromiseFulfilledResult<[string, HeroImage]> => result.status === "fulfilled")
        .map(result => result.value)
    )
  }
  return getWidthMaps()
}

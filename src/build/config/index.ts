/* eslint-disable no-console */
/**
 * Build Configuration Module
 * @module BuildConfig
 * @description
 * Core build system configuration and utilities for Plain License project.
 * Handles esbuild setup, image processing, and asset management.
 *
 * Features:
 * - Dynamic esbuild configuration with plugins
 * - Automated hero image srcset generation
 * - Smart focal point mapping for responsive images
 * - Cross-platform asset processing
 * - Glob-based file resolution
 *
 * @see {@link https://esbuild.github.io/}
 * @see {@link https://github.com/sindresorhus/globby}
 *
 * @license Plain-Unlicense
 * @author Adam Poulemanos adam<at>plainlicense<dot>org
 * @copyright No rights reserved.
 */

import { cssModulesPlugin } from "@asn.aeb/esbuild-css-modules-plugin"
// @ts-ignore
import { tsconfigPathsPlugin } from "esbuild-plugin-tsconfig-paths"
import * as esbuild from "esbuild"
import { copy } from 'esbuild-plugin-copy'
import globby from "globby"
import * as fs from "fs"

import type { CodecVariants, HeroImage, HeroPaths, HeroVideo, ImageIndex, ImageType, Project, VideoCodec, VideoConfig, VideoResolution, VideoWidth } from "../types.ts"

export const videoMessages = {
  "tokyo_shuffle": "Stop the Nonsense",
  "break_free": "Understanding. It shouldn't require a degree.",
} as Record<string, string>

export const backupImage = 'break_free'
export const cssSrc = "src/assets/stylesheets/bundle.css"


export const videoConfig = {
  resolutions: [
    { width: 3840, height: 2160 },
    { width: 2560, height: 1440 },
    { width: 1920, height: 1080 },
    { width: 1280, height: 720 },
    { width: 854, height: 480 },
    { width: 640, height: 360 },
    { width: 426, height: 240 },
  ] as VideoResolution[],
  codecs: ['av1', 'vp9', 'h264'] as VideoCodec[],
  baseDir: 'src/assets/videos/hero'
} as VideoConfig

export const resKeys: HeroPaths = Object.fromEntries(videoConfig.resolutions.map(res => [res.width, ""])) as HeroPaths

/**
 * @returns {Promise<string[]>} Directory paths containing hero videos
 */
export async function getVideoParents(): Promise<string[]> {
  return globby("src/assets/videos/hero/*", { onlyDirectories: true, unique: true })
}

/**
 * @param {string} baseName The base name of the video
 * @param {string} codec The codec of the video
 * @param {number} width The width of the video
 * @returns {string} Constructed video file path
 */
export function buildVideoPath(baseName: string, codec: string, width: number): string {
  const extension = codec === "h264" ? "mp4" : "webm"
  return `src/assets/videos/hero/${baseName}/${baseName}_${codec}_${width}.${extension}`
}

/**
 * @param {string} baseName The base name of the video
 * @returns {Promise<HeroVideo>} A promise that resolves to the hero video object
 */
export async function generateVideoVariants(baseName: string): Promise<HeroVideo> {
  // @ts-ignore
  const variants: CodecVariants = {
    av1: { ...resKeys },
    vp9: { ...resKeys },
    h264: { ...resKeys },
  }
  const imageVariants = {
    avif: { widths: { ...resKeys }, srcset: "", parent: "" },
    webp: { widths: { ...resKeys }, srcset: "", parent: "" },
    png: { widths: { ...resKeys }, srcset: "", parent: "" },
  }

  for (const resolution of videoConfig.resolutions) {
    for (const codec of videoConfig.codecs) {
      const path = buildVideoPath(baseName, codec, resolution.width)
      if (await fs.promises.access(path).catch(() => false) && Object.keys(variants[codec]).length > 0) {
        variants[codec][resolution.width] = path
      }
    }
  }

  // Get matching poster image
  const images = await heroImages()
  const poster = images.find((image) => image.imageName === baseName)
  return {
    baseName,
    parent: `src/assets/videos/hero/${baseName}`,
    variants,
    poster: poster || { parent: "", imageName: "", images: imageVariants },
  }
}

/**
 * @returns {Promise<string[]>} that resolves to the first file that matches the glob.
 * @description Scans the hero image directory for parent directories.
 */
export async function getHeroParents(): Promise<string[]> {
  const fastGlobSettings = { onlyDirectories: true, unique: true }
  const parents = globby("src/assets/videos/hero/*", fastGlobSettings)
  const parentList = []
  for await (const parent of await parents) {
    parentList.push(parent)
  }
  return parentList
}

const jsBanner = `/**
 * ---DO NOT EDIT THIS FILE---
 * The build process generates this file
 * You should edit the source file instead
 *
 * sources are in: src/assets/javascripts directory
 */
`
const cssBanner = `/**
  * ---DO NOT EDIT THIS FILE---
  * The build process generates this file
  * You should edit the source file instead
  *
  * sources are in: src/assets/stylesheets directory
  *
  */
`
/**
 * @description esbuild configuration for the web platform.
 */
export const webConfig: esbuild.BuildOptions = {
  bundle: true,
  minify: false,
  sourcemap: true,
  metafile: true,
  banner: { js: jsBanner, css: cssBanner },
  format: "esm",
  platform: "browser",
  target: "es2020",
  outbase: "src",
  chunkNames: "[dir]/assets/javascripts/chunks/[name].[hash]",
  assetNames: "[dir]/[name].[hash]",

  loader: {
    ".avif": "file",
    ".css": "css",
    ".js": "js",
    ".mp4": "file",
    ".png": "file",
    ".sass": "css",
    ".scss": "css",
    ".svg": "file",
    ".ts": "ts",
    ".tsx": "tsx",
    ".webm": "file",
    ".webp": "file",
    ".woff": "file",
    ".woff2": "file",
  },
  outExtension: {".js": ".js", ".css": ".css"},
  splitting: false,
  plugins: [
    tsconfigPathsPlugin({
      cwd: process.cwd(),
      tsconfig: "tsconfig.json",
      filter: /src\/assets\/javascripts\/index.ts/
    }),
    cssModulesPlugin({
      emitCssBundle: {
        filename: "bundle.css",
      },
    }),
    copy({
      watch: true,
      verbose: true,
      resolveFrom: "cwd",
      globbyOptions: { gitignore: true, extglob: true, unique: true },
      assets: [
        { from: "./src/assets/images/*.+(svg|png|webp|avif)", to: "./docs/assets/images" },
        { from: "./src/assets/fonts/*.+(woff|woff2)", to: "./docs/assets/fonts" },
        { from: "./src/assets/videos/*.+(webm|avif|mp4|webp|png)", to: "./docs/assets/videos" },
      ],
    }),
  ],
}

export const baseProject: Project = {
  entryPoints: ["src/assets/javascripts/index.ts",
    "src/assets/javascripts/workers/cache_worker.ts",
    "src/assets/stylesheets/bundle.css"
  ],
  tsconfig: "tsconfig.json",
  entryNames: "[dir]/[name].[hash]",
  platform: "browser",
  outdir: "docs",
}

/**
 * @param {string} glob The glob to resolve.
 * @param {globby.GlobbyOptions} fastGlobOptions Options to pass to fast-glob.
 * @returns {Promise<string[]>} A promise that resolves to the first file that matches the glob.
 */
async function resolveGlob(glob: string, fastGlobOptions?: {}): Promise<string[]> {
  try {
    const result = await globby(glob, fastGlobOptions)
    if (result.length === 0) {
      throw new Error(`Glob "${glob}" did not match any files`)
    } else {
      return result
    }
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("Error resolving glob:", error)
    throw error
  }
}

/**
 * @param {HeroImageBase} image The image to generate the Srcset for.
 * @returns {Promise<string>} A promise that resolves to the Srcset for the image.
 * @description Generates a Srcset property for the provided image.
 */
export async function generateSrcset(paths: HeroPaths): Promise<string> {
  const entries = await Promise.all(
    Object.entries(paths).map(async ([width, src]) => {
      return `${await resolveGlob(src, { onlyFiles: true, unique: true })} ${width}w`
    })
  )
  return entries.join(", ")
}

const filterForExtension = (children: string[], extension: string) => {
  return children.filter(child => child.endsWith(extension))
}

/**
 * @returns {Promise<Record<string, HeroImage>>} A promise that resolves to a map of hero images.
 * @description Generates a map of hero images with their respective widths and Srcsets.
 */
export const heroImages = async (): Promise<HeroImage[]> => {
  const allImages = []
  const parents = await resolveGlob("src/assets/videos/hero/*", { onlyDirectories: true })
  const retrieveKey = (filePath: string) => filePath.split("/").pop()
  const getWidthMaps = async () => {
    const results = await Promise.allSettled(
      parents.map(async (parent: string) => {
        const key = retrieveKey(parent)
        const heroFilePattern = `${key}_{1280,1920,2560,3840}.{avif,webp,png}`
        const children = await globby(`${parent}/posters/${heroFilePattern}`, { onlyFiles: true, unique: true })
        const availableExtensions = children.map(child => child.split(".").pop()).reduce((acc, ext) => {
          if (ext && typeof ext === 'string' && !acc.includes(ext)) {
            acc.push(ext)
          }
          return acc
        }, [] as string[]).filter(ext => ext !== undefined && ext !== null && ['avif', 'webp', 'png'].includes(ext))
        const pathObj = { ...resKeys }
        const widthArray = Object.keys(pathObj)
        let imageBaseIndex: ImageIndex = {
          avif: { widths: pathObj, parent: "", srcset: "" },
          webp: { widths: pathObj, parent: "", srcset: "" },
          png: { widths: pathObj, parent: "", srcset: "" },
        }
        for (const ext of availableExtensions) {
          const filteredChildren = filterForExtension(children, ext)
          if (filteredChildren.length === 0) {
            throw new Error(`No ${ext} files found in ${parent}`)
          }
          imageBaseIndex[ext as ImageType].parent = parent
          filteredChildren.forEach(child => {
            for (const width of widthArray) {
              if (child.includes(width) || child.includes(width.toString())) {
                const processedWidth = parseInt(width, 10) as VideoWidth
                imageBaseIndex[ext as ImageType].widths[processedWidth] = child
              }
            }
          })
          imageBaseIndex[ext as ImageType].srcset = await generateSrcset(imageBaseIndex[ext as ImageType].widths)
          return imageBaseIndex
        }
          return [key, {imageName: key, parent, images: imageBaseIndex} as HeroImage]
      }))
    return Array.from(results).map(result => {
      if (result.status === "fulfilled" && result.value) {
        return result.value
      }
      else if (result.status === "rejected") {
        throw new Error(`Error: ${result.reason}`)
      }
      else {
        throw new Error("Error: Unknown error")
      }
        }).flat().filter((image) => image !== undefined && image !== null && typeof image === 'object')
  }
  return (await getWidthMaps()).filter((image): image is HeroImage => typeof image === 'object' && image !== null)
}

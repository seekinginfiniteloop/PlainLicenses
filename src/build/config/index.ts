/* eslint-disable no-console */
import { cssModulesPlugin } from "@asn.aeb/esbuild-css-modules-plugin"
// @ts-ignore
import { tsconfigPathsPlugin } from "esbuild-plugin-tsconfig-paths"
import * as esbuild from "esbuild"
import { copy } from 'esbuild-plugin-copy'
import globby from "globby"

import type { HeroImage, HeroImageBase, Project, WidthMap } from "../types.ts"

/**
 * Resolves a glob parent directories of hero images.
 * @returns A promise that resolves to the first file that matches the glob.
 */
async function getHeroParents(): Promise<string[]> {
  const fastGlobSettings = { onlyDirectories: true, unique: true }
  return globby("src/assets/images/hero/*", fastGlobSettings)
}

/**
 * Resolves a glob to a single file.
 * @param glob The glob to resolve.
 * @returns An array of files that match the glob.
 */
export const heroParents: Promise<string[]> = getHeroParents()

const jsBanner = `/**
 * ---DO NOT EDIT THIS FILE---
 * it is generated by the build process
 * instead edit the source file
 *
 * main site sources are in src/assets/javascripts directory
 */
`
const cssBanner = `/**
  * ---DO NOT EDIT THIS FILE---
  * it is generated by the build process
  * instead edit the source file
  *
  * sources are in src/assets/stylesheets directory
  *
  */
`

export const webConfig: esbuild.BuildOptions = {
  bundle: true,
  minify: true,
  sourcemap: true,
  metafile: true,
  banner: { js: jsBanner, css: cssBanner },
  format: "esm",
  platform: "browser",
  target: "es2018",
  outbase: "src",
  chunkNames: "[dir]/assets/javascripts/chunks/[name].[hash]",
  assetNames: "[dir]/[name].[hash]",
  loader: {
    ".js": "js",
    ".ts": "ts",
    ".tsx": "tsx",
    ".css": "css",
    ".scss": "css",
    ".sass": "css",
    ".woff": "file",
    ".woff2": "file",
    ".png": "file",
    ".svg": "file",
    ".webp": "file",
    ".avif": "file",
  },
  outExtension: {".js": ".js", ".css": ".css"},
  splitting: false,
  plugins: [
    tsconfigPathsPlugin({
      cwd: process.cwd(),
      tsconfig: "tsconfig.json",
      filter: /src\/assets\/javascripts\/index.ts/
    }),
    cssModulesPlugin({
      emitCssBundle: {
        filename: "bundle.css",
      },
    }),
    copy({
      watch: true,
      verbose: true,
      resolveFrom: "cwd",
      globbyOptions: { gitignore: true, extglob: true, unique: true },
      assets: [
        { from: "./src/assets/images/*.+(svg|png|webp)", to: "./docs/assets/images" },
      ],
    }),
  ],
}

export const baseProject: Project = {
  entryPoints: ["src/assets/javascripts/index.ts", "src/assets/stylesheets/bundle.css"
  ],
  tsconfig: "tsconfig.json",
  entryNames: "[dir]/[name].[hash]",
  platform: "browser",
  outdir: "docs",
}

/**
 * Resolves a glob to a single file.
 * @param glob The glob to resolve.
 * @param fastGlobOptions Options to pass to fast-glob.
 * @returns A promise that resolves to the first file that matches the glob.
 */
async function resolveGlob(glob: string, fastGlobOptions?: {}): Promise<string[]> {
  try {
    const result = await globby(glob, fastGlobOptions)
    if (result.length === 0) {
      throw new Error(`Glob "${glob}" did not match any files`)
    } else {
      return result
    }
  } catch (error) {

    console.error("Error resolving glob:", error)
    throw error
  }
}

/**
 * Generates the Srcset for a given image.
 * @param image The image to generate the Srcset for.
 * @returns A promise that resolves to the Srcset for the image.
 */
export async function generateSrcset(image: HeroImageBase): Promise<string> {
  const entries = await Promise.all(
    Object.entries(image.widths).map(async ([width, src]) => {
      return `${await resolveGlob(src, { onlyFiles: true, unique: true })} ${width}w`
    })
  )
  return entries.join(", ")
}
const parentNames = async () => {
  const parents = await resolveGlob("src/assets/images/hero/*", { onlyDirectories: true })
  return parents.map((parent: string) => parent.split("/").pop())
}

export const getHeroImages = async (): Promise<{ [key: string]: HeroImage }> => {
  const parents = await parentNames()

  const flattenedWidths = Object.fromEntries(
    await Promise.all(
      parents.filter((parent): parent is string => parent !== undefined).map(async (parent: string) => {
        const key = parent.split("/").pop()
        const heroFilePattern = `${key}_{1280,1920,2560,3840}.avif`
        const children = await globby(`${parent}/${heroFilePattern}`, { onlyFiles: true, unique: true })
        const widths = children.reduce<WidthMap>((acc, child) => {
          const width = [1280, 1920, 2560, 3840].find(w => child.includes(w.toString()))
          if (width) {
            acc[width] = child
          }
          return acc
        }, {})
        return [parent, widths]
      })
    )
  )

  const handleError = (message: string, details: any) => {
    console.error(message, details)
    throw new Error(message)
  }

  return Object.fromEntries(
    await Promise.all(
      Object.entries(flattenedWidths).map(async ([key, parent]) => {
        if (!parent) {
          handleError(`No parent for ${key}`, { key })
        }
        const srcset = await generateSrcset({ parent: key, widths: parent as { [key: number]: string } })
        if (!srcset) {
          handleError(`No srcset for ${key}`, { parent, widths: flattenedWidths })
        }
        console.log({ key, parent, widths: flattenedWidths, srcset })
        return [key, { parent, widths: flattenedWidths, srcset }]
      })
    )
  )
}


export const heroImages: { [key: string]: HeroImage } = {}

getHeroImages()
  .then((result) => {
    Object.assign(heroImages, result)
  })
  .catch((error) => {

    console.error("Error resolving hero images:", error)
  })

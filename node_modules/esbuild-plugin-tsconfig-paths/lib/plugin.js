"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsconfigPathsPlugin = void 0;
const index_1 = require("tsconfig-paths/lib/index");
const constants_1 = require("./constants");
const tranformer_1 = require("./tranformer");
const TsLibFactory_1 = require("./TsLibFactory");
function tsconfigPathsPlugin(options) {
    const { filter, tsconfig = constants_1.DEFAULT_CONFIG_NAME, cwd } = options !== null && options !== void 0 ? options : {};
    const tsLib = new TsLibFactory_1.TsLibFactory().import();
    const tsconfigPath = tsLib.findConfigFile(cwd || process.cwd(), tsLib.sys.fileExists, tsconfig);
    const { config, error } = tsLib.readConfigFile(tsconfigPath, tsLib.sys.readFile);
    if (error) {
        throw error;
    }
    const { paths = {}, baseUrl = './' } = (config === null || config === void 0 ? void 0 : config.compilerOptions) || {};
    const pathMatcher = (0, index_1.createMatchPath)(baseUrl, paths, ['main']);
    return {
        name: constants_1.PLUGIN_NAME,
        setup(build) {
            build.onLoad({ filter: filter || constants_1.DEFAULT_FILTER }, (args) => {
                const fromPath = args.path;
                const program = tsLib.createProgram([fromPath], {});
                const sourceFile = program.getSourceFile(fromPath);
                const tranformer = tsLib.transform(sourceFile, [(0, tranformer_1.getTransformer)({ sourcePath: fromPath, tsLib }, pathMatcher)]);
                const printer = tsLib.createPrinter({ newLine: tsLib.NewLineKind.LineFeed });
                const code = printer.printFile(tranformer.transformed[0]);
                return {
                    contents: code,
                    loader: 'ts'
                };
            });
        }
    };
}
exports.tsconfigPathsPlugin = tsconfigPathsPlugin;

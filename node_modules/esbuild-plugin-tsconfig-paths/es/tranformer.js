import { getNoAliasPath } from './utils';
export function getTransformer(options, matcher) {
    const { sourcePath, tsLib } = options;
    return (context) => {
        return function visitNode(node) {
            try {
                if (tsLib.isImportDeclaration(node) || tsLib.isExportDeclaration(node) && node.moduleSpecifier) {
                    const importPath = node.moduleSpecifier && node.moduleSpecifier.text;
                    if (!importPath) {
                        return node;
                    }
                    const relativePath = getNoAliasPath(sourcePath, importPath, matcher);
                    if (!relativePath) {
                        return node;
                    }
                    const newModuleSpecifier = tsLib.factory.createStringLiteral(relativePath);
                    newModuleSpecifier.parent = node.moduleSpecifier.parent;
                    if (tsLib.isImportDeclaration(node)) {
                        const newNode = tsLib.factory.updateImportDeclaration(node, node.modifiers, node.importClause, newModuleSpecifier, node.assertClause);
                        newNode.flags = node.flags;
                        return newNode;
                    }
                    else if (tsLib.isExportDeclaration(node)) {
                        const newNode = tsLib.factory.updateExportDeclaration(node, node.modifiers, node.isTypeOnly, node.exportClause, newModuleSpecifier, node.assertClause);
                        newNode.flags = node.flags;
                        return newNode;
                    }
                }
            }
            catch (error) {
                console.log(error);
                return node;
            }
            return tsLib.visitEachChild(node, visitNode, context);
        };
    };
}

import { createMatchPath } from 'tsconfig-paths/lib/index';
import { DEFAULT_CONFIG_NAME, DEFAULT_FILTER, PLUGIN_NAME } from "./constants";
import { getTransformer } from './tranformer';
import { TsLibFactory } from './TsLibFactory';
export function tsconfigPathsPlugin(options) {
    const { filter, tsconfig = DEFAULT_CONFIG_NAME, cwd } = options !== null && options !== void 0 ? options : {};
    const tsLib = new TsLibFactory().import();
    const tsconfigPath = tsLib.findConfigFile(cwd || process.cwd(), tsLib.sys.fileExists, tsconfig);
    const { config, error } = tsLib.readConfigFile(tsconfigPath, tsLib.sys.readFile);
    if (error) {
        throw error;
    }
    const { paths = {}, baseUrl = './' } = (config === null || config === void 0 ? void 0 : config.compilerOptions) || {};
    const pathMatcher = createMatchPath(baseUrl, paths, ['main']);
    return {
        name: PLUGIN_NAME,
        setup(build) {
            build.onLoad({ filter: filter || DEFAULT_FILTER }, (args) => {
                const fromPath = args.path;
                const program = tsLib.createProgram([fromPath], {});
                const sourceFile = program.getSourceFile(fromPath);
                const tranformer = tsLib.transform(sourceFile, [getTransformer({ sourcePath: fromPath, tsLib }, pathMatcher)]);
                const printer = tsLib.createPrinter({ newLine: tsLib.NewLineKind.LineFeed });
                const code = printer.printFile(tranformer.transformed[0]);
                return {
                    contents: code,
                    loader: 'ts'
                };
            });
        }
    };
}

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cssModulesPlugin = void 0;
const promises_1 = require("node:fs/promises");
const node_path_1 = require("node:path");
const postcss_1 = __importDefault(require("postcss"));
const postcss_modules_1 = __importDefault(require("postcss-modules"));
let js;
function generateJS(buildOptions, pluginOptions) {
    const postcssModules = (0, postcss_modules_1.default)({
        getJSON(cssFilename, json, outputFilename) {
            let exports = 'export default ';
            if (buildOptions.format === 'cjs') {
                exports = 'module.exports = ';
            }
            js = exports + JSON.stringify(json, null, 4);
        },
        generateScopedName: pluginOptions?.scopedNames
    });
    return postcssModules;
}
function cssModulesPlugin(options) {
    let css;
    return {
        name: 'css-modules',
        setup(build) {
            try {
                build.onLoad({ filter: /\.module\.css$/ }, async (args) => {
                    const file = await (0, promises_1.readFile)(args.path, 'utf-8');
                    const postcssModules = generateJS(build.initialOptions, options);
                    const postcssResult = await (0, postcss_1.default)(postcssModules).process(file, {
                        from: args.path,
                        to: build.initialOptions.outdir,
                    });
                    if (options?.emitCssBundle && postcssResult.css) {
                        css ?? (css = '');
                        css += postcssResult.css + '\n\n';
                    }
                    if (js) {
                        return {
                            contents: js
                        };
                    }
                });
                if (!build.initialOptions.bundle) {
                    build.onLoad({ filter: /\.(js|jsx|ts|tsx)$/ }, async (args) => {
                        let loader;
                        let file = await (0, promises_1.readFile)(args.path, 'utf-8');
                        const extension = (0, node_path_1.extname)(args.path);
                        const matches = file.match(/(import|require).+\.module.css/g);
                        if (matches)
                            for (const match of matches) {
                                const toJS = match.replace('.module.css', '.module.js');
                                const path = match.replace(/(import|require).+(\'|\")/, '');
                                const fullPath = (0, node_path_1.resolve)((0, node_path_1.join)((0, node_path_1.parse)(args.path).dir, path));
                                if (Array.isArray(build.initialOptions.entryPoints)) {
                                    build.initialOptions.entryPoints.forEach(i => {
                                        if (typeof i === 'string' && (0, node_path_1.resolve)(i) === fullPath) {
                                            file = file.replace(match, toJS);
                                        }
                                    });
                                }
                            }
                        switch (extension) {
                            case '.ts':
                            case '.js':
                            case '.tsx':
                            case '.jsx':
                                loader = extension.substring(1);
                        }
                        return { contents: file, loader };
                    });
                }
                build.onEnd(async (result) => {
                    if (css && options?.emitCssBundle) {
                        const dir = options.emitCssBundle.path ?? build.initialOptions.outdir;
                        if (dir) {
                            let path = (0, node_path_1.join)(dir, options.emitCssBundle.filename);
                            if (!path.endsWith('.css')) {
                                path += '.css';
                            }
                            try {
                                await (0, promises_1.mkdir)(dir, { recursive: true });
                            }
                            catch { }
                            await (0, promises_1.writeFile)(path, css);
                        }
                    }
                    js = null;
                    return;
                });
            }
            catch (error) {
                console.log(error);
            }
        }
    };
}
exports.cssModulesPlugin = cssModulesPlugin;
